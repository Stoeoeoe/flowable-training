{"version":3,"sources":["complaint/ComplaintForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ComplaintForm","props","state","name","handleChange","bind","handleSubmit","event","this","setState","target","value","alert","preventDefault","onSubmit","className","type","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","rel","href","integrity","crossOrigin","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOA4CeA,E,kDAjCX,WAAYC,GAA4B,IAAD,8BACnC,cAAMA,IACDC,MAAQ,CAACC,KAAM,IAEpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALe,E,yDAQ1BE,GACTC,KAAKC,SAAS,CAACN,KAAMI,EAAMG,OAAOC,U,mCAGzBJ,GACTK,MAAM,yBAA2BJ,KAAKN,MAAMC,MAC5CI,EAAMM,mB,+BAIN,OACI,oCACI,6CACA,0BAAMC,SAAUN,KAAKF,aAAcS,UAAU,cACzC,uCAEI,2BAAOC,KAAK,OAAOL,MAAOH,KAAKN,MAAMC,KAAMc,SAAUT,KAAKJ,gBAE9D,2BAAOY,KAAK,SAASL,MAAM,iB,GA3BnBO,a,MCObC,MAbf,WACE,OAEI,yBAAKJ,UAAU,YACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,oBACX,kBAAC,EAAD,UCEEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,0BACIC,IAAI,aACJC,KAAK,wEACLC,UAAU,0EACVC,YAAY,cAEhB,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.111aeb02.chunk.js","sourcesContent":["import React, {ChangeEvent, Component, FormEvent} from 'react';\r\n\r\ntype ComplaintFormProps = {\r\n\r\n}\r\n\r\ntype ComplaintFormState ={\r\n    name: string;\r\n}\r\n\r\nclass ComplaintForm extends Component<ComplaintFormProps, ComplaintFormState> {\r\n    constructor(props: ComplaintFormProps) {\r\n        super(props);\r\n        this.state = {name: ''};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event: ChangeEvent<HTMLInputElement>) {\r\n        this.setState({name: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event: FormEvent<HTMLFormElement>) {\r\n        alert('A name was submitted: ' + this.state.name);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>Add Complaint</h1>\r\n                <form onSubmit={this.handleSubmit} className=\"form-group\">\r\n                    <label>\r\n                        Name:\r\n                        <input type=\"text\" value={this.state.name} onChange={this.handleChange} />\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComplaintForm;","import React from 'react';\nimport ComplaintForm from './complaint/ComplaintForm';\nimport './App.css';\n\nfunction App() {\n  return (\n\n      <div className=\"bg-light\">\n          <div className=\"app container\">\n              <div className=\"py-5 text-center\">\n                  <ComplaintForm/>\n              </div>\n          </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n      <link\n          rel=\"stylesheet\"\n          href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\"\n          integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\"\n          crossOrigin=\"anonymous\"\n      />\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}